name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DOCKER_BUILDKIT: 1
  REGISTRY: registry.aqueous.network
  PORTAINER_URL: https://port.aqueous.network
  PORTAINER_STACK_ID_STAGING: 114
  PORTAINER_STACK_ID_PRODUCTION: 114

jobs:
  # Test jobs run in parallel
  test-api:
    runs-on: docker
    container:
      image: oven/bun:1-alpine
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: baseline_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Install dependencies
        run: |
          cd api
          bun install
      - name: Run tests
        run: |
          cd api
          bun test
        continue-on-error: true

  test-ui:
    runs-on: docker
    container:
      image: node:20-alpine
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Install dependencies
        run: |
          cd ui
          npm ci
      - name: Run linting
        run: |
          cd ui
          npm run lint
      - name: Type checking
        run: |
          cd ui
          npm run type-check
      - name: Run tests with coverage
        run: |
          cd ui
          npm run test:coverage
        continue-on-error: true

  # Build jobs run in parallel with tests (no dependency)
  build-api:
    runs-on: docker
    container:
      image: oven/bun:1-alpine
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push API
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          target: production
          push: true
          tags: |
            ${{ env.REGISTRY }}/baseline-api:${{ github.sha }}
            ${{ env.REGISTRY }}/baseline-api:${{ github.ref_name }}
            ${{ env.REGISTRY }}/baseline-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  build-ui:
    runs-on: docker
    container:
      image: node:20-alpine
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push UI
        uses: docker/build-push-action@v5
        with:
          context: ./ui
          file: ./ui/Dockerfile
          target: production
          push: true
          tags: |
            ${{ env.REGISTRY }}/baseline-ui:${{ github.sha }}
            ${{ env.REGISTRY }}/baseline-ui:${{ github.ref_name }}
            ${{ env.REGISTRY }}/baseline-ui:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  deploy-staging:
    runs-on: docker
    needs: [build-api, build-ui]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Trigger Portainer staging deployment
        run: |
          HTTP_CODE=$(curl -s -o response.txt -w "%{http_code}" \
            -X POST "${{ env.PORTAINER_URL }}/api/stacks/${{ env.PORTAINER_STACK_ID_STAGING }}/git/redeploy" \
            -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"RepositoryReferenceName": "develop"}')
          
          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 202 ]; then
            echo "✅ Staging deployment triggered successfully"
          else
            echo "❌ Staging deployment failed with HTTP $HTTP_CODE"
            cat response.txt
            exit 1
          fi

  deploy-production:
    runs-on: docker
    needs: [build-api, build-ui]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Trigger Portainer production deployment
        run: |
          HTTP_CODE=$(curl -s -o response.txt -w "%{http_code}" \
            -X POST "${{ env.PORTAINER_URL }}/api/stacks/${{ env.PORTAINER_STACK_ID_PRODUCTION }}/git/redeploy" \
            -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"RepositoryReferenceName": "main"}')
          
          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 202 ]; then
            echo "✅ Production deployment triggered successfully"
          else
            echo "❌ Production deployment failed with HTTP $HTTP_CODE"
            cat response.txt
            exit 1
          fi
