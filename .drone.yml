kind: pipeline
type: docker
name: baseline

environment:
  DOCKER_BUILDKIT: 1

steps:
  # Parallel test and build steps for faster CI/CD
  - name: test-api
    image: oven/bun:1
    commands:
      - cd api
      - bun install
      - bun test
    failure: ignore
    when:
      event:
        - push
        - pull_request

  - name: test-ui
    image: node:20-alpine
    commands:
      - cd ui
      - npm ci
      - npm run lint
      - npm run type-check
      - npm run test:coverage
    failure: ignore
    when:
      event:
        - push
        - pull_request

  - name: build-api
    image: plugins/docker
    settings:
      repo: registry.aqueous.network/baseline-api
      tags:
        - ${DRONE_COMMIT_SHA:0:8}
        - ${DRONE_BRANCH}
        - latest
      dockerfile: api/Dockerfile
      context: api
      target: production
      build_args:
        - NODE_ENV=production
      insecure: true
    when:
      event:
        - push
      branch:
        - main
        - develop

  - name: build-ui
    image: plugins/docker
    settings:
      repo: registry.aqueous.network/baseline-ui
      tags:
        - ${DRONE_COMMIT_SHA:0:8}
        - ${DRONE_BRANCH}
        - latest
      dockerfile: ui/Dockerfile
      context: ui
      target: production
      build_args:
        - NODE_ENV=production
      insecure: true
    when:
      event:
        - push
      branch:
        - main
        - develop

  - name: deploy-staging
    image: alpine:latest
    depends_on:
      - build-api
      - build-ui
    environment:
      PORTAINER_URL:
        from_secret: PORTAINER_URL
      PORTAINER_API_KEY:
        from_secret: PORTAINER_API_KEY
      PORTAINER_STACK_ID_STAGING:
        from_secret: PORTAINER_STACK_ID_STAGING
    commands:
      - apk add --no-cache curl
      - |
        echo "üöÄ Deploying to staging..."
        RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT "$PORTAINER_URL/api/stacks/$PORTAINER_STACK_ID_STAGING/git/redeploy?endpointId=1" \
          -H "X-API-Key: $PORTAINER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "repositoryReferenceName": "refs/heads/develop",
            "repositoryAuthentication": false
          }')
        
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | head -n -1)
        
        echo "Portainer Response: $BODY"
        echo "HTTP Status: $HTTP_CODE"
        
        if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 202 ]; then
          echo "‚úÖ Staging deployment triggered successfully"
        else
          echo "‚ùå Staging deployment failed with HTTP $HTTP_CODE"
          echo "Response body: $BODY"
          exit 1
        fi
    when:
      event:
        - push
      branch:
        - develop

  - name: deploy-production
    image: alpine:latest
    depends_on:
      - build-api
      - build-ui
    environment:
      PORTAINER_URL:
        from_secret: PORTAINER_URL
      PORTAINER_API_KEY:
        from_secret: PORTAINER_API_KEY
      PORTAINER_STACK_ID_PRODUCTION:
        from_secret: PORTAINER_STACK_ID_PRODUCTION
    commands:
      - apk add --no-cache curl
      - |
        echo "üöÄ Deploying to production..."
        RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT "$PORTAINER_URL/api/stacks/$PORTAINER_STACK_ID_PRODUCTION/git/redeploy?endpointId=1" \
          -H "X-API-Key: $PORTAINER_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "repositoryReferenceName": "refs/heads/main",
            "repositoryAuthentication": false
          }')
        
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | head -n -1)
        
        echo "Portainer Response: $BODY"
        echo "HTTP Status: $HTTP_CODE"
        
        if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 202 ]; then
          echo "‚úÖ Production deployment triggered successfully"
        else
          echo "‚ùå Production deployment failed with HTTP $HTTP_CODE"
          echo "Response body: $BODY"
          exit 1
        fi
    when:
      event:
        - push
      branch:
        - main

  # - name: notify-success
  #   image: plugins/slack
  #   depends_on:
  #     - deploy-staging
  #     - deploy-production
  #   settings:
  #     webhook:
  #       from_secret: slack_webhook
  #     channel: deployments
  #     username: drone
  #     template: |
  #       ‚úÖ *{{repo.name}}* deployment successful
  #       üì¶ Branch: `{{build.branch}}`
  #       üè∑Ô∏è Tag: `{{build.tag}}`
  #       üë§ Author: {{build.author}}
  #       üîó <{{build.link}}|View Build>
  #   when:
  #     status:
  #       - success
  #     event:
  #       - push
  #     branch:
  #       - main
  #       - develop

  # - name: notify-failure
  #   image: plugins/slack
  #   depends_on:
  #     - deploy-staging
  #     - deploy-production
  #   settings:
  #     webhook:
  #       from_secret: slack_webhook
  #     channel: deployments
  #     username: drone
  #     template: |
  #       ‚ùå *{{repo.name}}* deployment failed
  #       üì¶ Branch: `{{build.branch}}`
  #       üë§ Author: {{build.author}}
  #       üîó <{{build.link}}|View Build>
  #   when:
  #     status:
  #       - failure

services:
  - name: postgres
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: baseline_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 5432

  - name: redis
    image: redis:7-alpine
    ports:
      - 6379

---
kind: secret
name: slack_webhook
get:
  path: slack
  name: webhook
