version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: baseline-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - baseline-network

  redis:
    image: redis:7-alpine
    container_name: baseline-redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - baseline-network

  api:
    # image: registry.aqueous.network/baseline-api:${IMAGE_TAG:-latest}
    container_name: baseline-api
    build:
      context: ./api
      dockerfile: Dockerfile
      target: production
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      API_PORT: 3001
      UI_URL: ${UI_URL}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
    ports:
      - "${API_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - baseline-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ui:
    # image: registry.aqueous.network/baseline-ui:${IMAGE_TAG:-latest}
    container_name: baseline-ui
    build:
      context: ./ui
      dockerfile: Dockerfile
      target: production
    environment:
      NODE_ENV: production
      API_URL: ${API_URL}
      WS_URL: ${WS_URL}
      APP_NAME: ${APP_NAME:-Baseline}
      APP_VERSION: ${APP_VERSION:-1.0.0}
    ports:
      - "${UI_PORT:-3000}:3000"
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - baseline-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  baseline-network:
    driver: bridge
