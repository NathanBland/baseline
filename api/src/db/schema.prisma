// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  firstName String?
  lastName  String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Auth-related fields
  hashedPassword String?
  emailVerified  Boolean @default(false)
  
  // Relations
  sessions      Session[]
  conversations ConversationParticipant[]
  messages      Message[]
  
  // OIDC fields
  oidcProvider String?
  oidcId       String?

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Conversation {
  id          String   @id @default(cuid())
  title       String?
  description String?
  type        ConversationType @default(DIRECT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  role           ParticipantRole @default(MEMBER)
  joinedAt       DateTime @default(now())
  leftAt         DateTime?
  
  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id             String      @id @default(cuid())
  content        String
  type           MessageType @default(TEXT)
  conversationId String
  userId         String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  editedAt       DateTime?
  deletedAt      DateTime?
  
  // Message metadata
  metadata Json?
  
  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  replyTo      Message?     @relation("MessageReplies", fields: [replyToId], references: [id])
  replies      Message[]    @relation("MessageReplies")
  
  // Optional reply reference
  replyToId String?

  @@map("messages")
}

enum ConversationType {
  DIRECT
  GROUP
  CHANNEL
}

enum ParticipantRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
  REACTION
}
